// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using server.Helpers;

namespace server.Migrations
{
    [DbContext(typeof(ModelContext))]
    partial class ModelContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("server.Models.Address.District", b =>
                {
                    b.Property<long>("DistrictId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("ProvinceId")
                        .HasColumnType("bigint");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DistrictId");

                    b.HasIndex("ProvinceId");

                    b.ToTable("district");

                    b.HasData(
                        new
                        {
                            DistrictId = 1L,
                            ProvinceId = 77L,
                            Title = "Merkez"
                        },
                        new
                        {
                            DistrictId = 2L,
                            ProvinceId = 77L,
                            Title = "Termal"
                        },
                        new
                        {
                            DistrictId = 3L,
                            ProvinceId = 77L,
                            Title = "Çınarcık"
                        },
                        new
                        {
                            DistrictId = 4L,
                            ProvinceId = 34L,
                            Title = "Pendik"
                        },
                        new
                        {
                            DistrictId = 5L,
                            ProvinceId = 34L,
                            Title = "Kartal"
                        });
                });

            modelBuilder.Entity("server.Models.Address.Province", b =>
                {
                    b.Property<long>("ProvinceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProvinceId");

                    b.ToTable("province");

                    b.HasData(
                        new
                        {
                            ProvinceId = 77L,
                            Title = "Yalova"
                        },
                        new
                        {
                            ProvinceId = 48L,
                            Title = "Muğla"
                        },
                        new
                        {
                            ProvinceId = 34L,
                            Title = "İstanbul"
                        },
                        new
                        {
                            ProvinceId = 9L,
                            Title = "Ankara"
                        },
                        new
                        {
                            ProvinceId = 35L,
                            Title = "İzmir"
                        });
                });

            modelBuilder.Entity("server.Models.Category.Category", b =>
                {
                    b.Property<long>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryId");

                    b.ToTable("category");

                    b.HasData(
                        new
                        {
                            CategoryId = 1L,
                            DateCreated = new DateTime(2020, 4, 11, 1, 7, 57, 217, DateTimeKind.Utc).AddTicks(5047),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Slug = "woman",
                            Status = 1,
                            Title = "Women"
                        },
                        new
                        {
                            CategoryId = 2L,
                            DateCreated = new DateTime(2020, 4, 11, 1, 7, 57, 217, DateTimeKind.Utc).AddTicks(7350),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Slug = "men",
                            Status = 1,
                            Title = "Men"
                        },
                        new
                        {
                            CategoryId = 3L,
                            DateCreated = new DateTime(2020, 4, 11, 1, 7, 57, 217, DateTimeKind.Utc).AddTicks(7469),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Slug = "child",
                            Status = 1,
                            Title = "Child"
                        },
                        new
                        {
                            CategoryId = 4L,
                            DateCreated = new DateTime(2020, 4, 11, 1, 7, 57, 217, DateTimeKind.Utc).AddTicks(7472),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Slug = "outlet",
                            Status = 1,
                            Title = "Outlet"
                        });
                });

            modelBuilder.Entity("server.Models.Category.ChildCategory", b =>
                {
                    b.Property<long>("ChildCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<long>("SubCategoryId")
                        .HasColumnType("bigint");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ChildCategoryId");

                    b.HasIndex("SubCategoryId");

                    b.ToTable("child_categories");

                    b.HasData(
                        new
                        {
                            ChildCategoryId = 1L,
                            DateCreated = new DateTime(2020, 4, 11, 1, 7, 57, 218, DateTimeKind.Utc).AddTicks(6715),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Slug = "denim",
                            Status = 1,
                            SubCategoryId = 1L,
                            Title = "Denim"
                        },
                        new
                        {
                            ChildCategoryId = 2L,
                            DateCreated = new DateTime(2020, 4, 11, 1, 7, 57, 218, DateTimeKind.Utc).AddTicks(9566),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Slug = "shirts",
                            Status = 1,
                            SubCategoryId = 1L,
                            Title = "Shirts"
                        },
                        new
                        {
                            ChildCategoryId = 3L,
                            DateCreated = new DateTime(2020, 4, 11, 1, 7, 57, 218, DateTimeKind.Utc).AddTicks(9636),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Slug = "t-shirts",
                            Status = 1,
                            SubCategoryId = 1L,
                            Title = "T-Shirts"
                        },
                        new
                        {
                            ChildCategoryId = 4L,
                            DateCreated = new DateTime(2020, 4, 11, 1, 7, 57, 218, DateTimeKind.Utc).AddTicks(9639),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Slug = "basics",
                            Status = 1,
                            SubCategoryId = 1L,
                            Title = "Basics"
                        },
                        new
                        {
                            ChildCategoryId = 5L,
                            DateCreated = new DateTime(2020, 4, 11, 1, 7, 57, 218, DateTimeKind.Utc).AddTicks(9641),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Slug = "sweatshirts",
                            Status = 1,
                            SubCategoryId = 1L,
                            Title = "Sweatshirts"
                        },
                        new
                        {
                            ChildCategoryId = 6L,
                            DateCreated = new DateTime(2020, 4, 11, 1, 7, 57, 218, DateTimeKind.Utc).AddTicks(9643),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Slug = "coat-jacket",
                            Status = 1,
                            SubCategoryId = 1L,
                            Title = "Coat - Jacket"
                        },
                        new
                        {
                            ChildCategoryId = 7L,
                            DateCreated = new DateTime(2020, 4, 11, 1, 7, 57, 218, DateTimeKind.Utc).AddTicks(9645),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Slug = "pants",
                            Status = 1,
                            SubCategoryId = 1L,
                            Title = "Pants"
                        },
                        new
                        {
                            ChildCategoryId = 8L,
                            DateCreated = new DateTime(2020, 4, 11, 1, 7, 57, 218, DateTimeKind.Utc).AddTicks(9647),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Slug = "knitwear-sweaters",
                            Status = 1,
                            SubCategoryId = 1L,
                            Title = "Knitwear-Sweaters"
                        },
                        new
                        {
                            ChildCategoryId = 9L,
                            DateCreated = new DateTime(2020, 4, 11, 1, 7, 57, 218, DateTimeKind.Utc).AddTicks(9649),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Slug = "bags-wallets",
                            Status = 1,
                            SubCategoryId = 2L,
                            Title = "Bags-Wallets"
                        },
                        new
                        {
                            ChildCategoryId = 10L,
                            DateCreated = new DateTime(2020, 4, 11, 1, 7, 57, 218, DateTimeKind.Utc).AddTicks(9651),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Slug = "parfume",
                            Status = 1,
                            SubCategoryId = 2L,
                            Title = "Parfume"
                        },
                        new
                        {
                            ChildCategoryId = 11L,
                            DateCreated = new DateTime(2020, 4, 11, 1, 7, 57, 218, DateTimeKind.Utc).AddTicks(9653),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Slug = "belt",
                            Status = 1,
                            SubCategoryId = 2L,
                            Title = "Belt"
                        },
                        new
                        {
                            ChildCategoryId = 12L,
                            DateCreated = new DateTime(2020, 4, 11, 1, 7, 57, 218, DateTimeKind.Utc).AddTicks(9654),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Slug = "scarf-beret",
                            Status = 1,
                            SubCategoryId = 2L,
                            Title = "Scarf-Beret"
                        },
                        new
                        {
                            ChildCategoryId = 13L,
                            DateCreated = new DateTime(2020, 4, 11, 1, 7, 57, 218, DateTimeKind.Utc).AddTicks(9656),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Slug = "hats",
                            Status = 1,
                            SubCategoryId = 2L,
                            Title = "Hats"
                        },
                        new
                        {
                            ChildCategoryId = 14L,
                            DateCreated = new DateTime(2020, 4, 11, 1, 7, 57, 218, DateTimeKind.Utc).AddTicks(9658),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Slug = "boxer",
                            Status = 1,
                            SubCategoryId = 2L,
                            Title = "Boxer"
                        },
                        new
                        {
                            ChildCategoryId = 15L,
                            DateCreated = new DateTime(2020, 4, 11, 1, 7, 57, 218, DateTimeKind.Utc).AddTicks(9659),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Slug = "socks",
                            Status = 1,
                            SubCategoryId = 2L,
                            Title = "Socks"
                        },
                        new
                        {
                            ChildCategoryId = 16L,
                            DateCreated = new DateTime(2020, 4, 11, 1, 7, 57, 218, DateTimeKind.Utc).AddTicks(9661),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Slug = "boxer",
                            Status = 1,
                            SubCategoryId = 2L,
                            Title = "Boxer"
                        });
                });

            modelBuilder.Entity("server.Models.Category.SubCategory", b =>
                {
                    b.Property<long>("SubCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<long>("ParentCategoryId")
                        .HasColumnType("bigint");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SubCategoryId");

                    b.HasIndex("ParentCategoryId");

                    b.ToTable("sub_categories");

                    b.HasData(
                        new
                        {
                            SubCategoryId = 1L,
                            DateCreated = new DateTime(2020, 4, 11, 1, 7, 57, 218, DateTimeKind.Utc).AddTicks(553),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ParentCategoryId = 2L,
                            Slug = "clothes",
                            Status = 1,
                            Title = "Clothes"
                        },
                        new
                        {
                            SubCategoryId = 2L,
                            DateCreated = new DateTime(2020, 4, 11, 1, 7, 57, 218, DateTimeKind.Utc).AddTicks(3547),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ParentCategoryId = 2L,
                            Slug = "accessories",
                            Status = 1,
                            Title = "Accessories"
                        });
                });

            modelBuilder.Entity("server.Models.Order.Basket", b =>
                {
                    b.Property<long>("BasketId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<long>("ProductPropertyId")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("BasketId");

                    b.HasIndex("ProductPropertyId");

                    b.HasIndex("UserId");

                    b.ToTable("basket");
                });

            modelBuilder.Entity("server.Models.Order.Order", b =>
                {
                    b.Property<long>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<long?>("DistrictId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<float>("TotalPrice")
                        .HasColumnType("real");

                    b.Property<string>("TrackCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("OrderId");

                    b.HasIndex("DistrictId");

                    b.HasIndex("UserId");

                    b.ToTable("order");
                });

            modelBuilder.Entity("server.Models.Order.OrderDetail", b =>
                {
                    b.Property<long>("OrderDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DeliveryDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("OrderId")
                        .HasColumnType("bigint");

                    b.Property<int>("Piece")
                        .HasColumnType("int");

                    b.Property<long?>("ProductPropertyId")
                        .HasColumnType("bigint");

                    b.Property<double>("TotalPrice")
                        .HasColumnType("float");

                    b.Property<double>("UnitPrice")
                        .HasColumnType("float");

                    b.HasKey("OrderDetailId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductPropertyId");

                    b.ToTable("order_detail");
                });

            modelBuilder.Entity("server.Models.Product.Product", b =>
                {
                    b.Property<long>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("ChildCategoryId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProductId");

                    b.HasIndex("ChildCategoryId");

                    b.ToTable("products");

                    b.HasData(
                        new
                        {
                            ProductId = 1L,
                            ChildCategoryId = 1L,
                            DateCreated = new DateTime(2020, 4, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateModified = new DateTime(2020, 4, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Normal Bel, Skinny",
                            Status = 0,
                            Title = "JAKE"
                        },
                        new
                        {
                            ProductId = 2L,
                            ChildCategoryId = 2L,
                            DateCreated = new DateTime(2020, 4, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateModified = new DateTime(2020, 4, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            Status = 0,
                            Title = "James Black Pro Gölge Mavi Jean Pantolon"
                        });
                });

            modelBuilder.Entity("server.Models.Product.ProductImage", b =>
                {
                    b.Property<long>("ImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<long>("ProductPropertyId")
                        .HasColumnType("bigint");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ImageId");

                    b.HasIndex("ProductPropertyId");

                    b.ToTable("product_images");

                    b.HasData(
                        new
                        {
                            ImageId = 1L,
                            DateAdded = new DateTime(2020, 4, 11, 1, 7, 57, 221, DateTimeKind.Utc).AddTicks(805),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductPropertyId = 1L,
                            Title = "",
                            Url = "https://sky-static.mavi.com/sys-master/maviTrImages/hb4/h73/9320593162270/0042230560_image_1.jpg_Default-ZoomProductImage"
                        },
                        new
                        {
                            ImageId = 2L,
                            DateAdded = new DateTime(2020, 4, 11, 1, 7, 57, 221, DateTimeKind.Utc).AddTicks(3300),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductPropertyId = 2L,
                            Title = "",
                            Url = "https://sky-static.mavi.com/sys-master/maviTrImages/h40/h17/9320592539678/0042230560_image_2.jpg_Default-MainProductImage"
                        },
                        new
                        {
                            ImageId = 3L,
                            DateAdded = new DateTime(2020, 4, 11, 1, 7, 57, 221, DateTimeKind.Utc).AddTicks(3355),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductPropertyId = 3L,
                            Title = "",
                            Url = "https://sky-static.mavi.com/sys-master/maviTrImages/h8c/h21/9206049013790/0042223856_image_1.jpg_Default-ZoomProductImage"
                        },
                        new
                        {
                            ImageId = 4L,
                            DateAdded = new DateTime(2020, 4, 11, 1, 7, 57, 221, DateTimeKind.Utc).AddTicks(3358),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductPropertyId = 4L,
                            Title = "",
                            Url = "https://sky-static.mavi.com/sys-master/maviTrImages/hc1/h6d/9313162428446/0042226971_image_1.jpg_Default-ZoomProductImage"
                        });
                });

            modelBuilder.Entity("server.Models.Product.ProductProperty", b =>
                {
                    b.Property<long>("ProductPropertyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<long?>("ProductColorId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ProductHeightId")
                        .HasColumnType("bigint");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ProductSizeId")
                        .HasColumnType("bigint");

                    b.Property<long>("ProductThemeId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ProductTrotterId")
                        .HasColumnType("bigint");

                    b.Property<int>("StockCount")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProductPropertyId");

                    b.HasIndex("ProductColorId");

                    b.HasIndex("ProductHeightId");

                    b.HasIndex("ProductId");

                    b.HasIndex("ProductSizeId");

                    b.HasIndex("ProductThemeId");

                    b.HasIndex("ProductTrotterId");

                    b.ToTable("product_property");

                    b.HasData(
                        new
                        {
                            ProductPropertyId = 1L,
                            DateCreated = new DateTime(2020, 4, 11, 1, 7, 57, 220, DateTimeKind.Utc).AddTicks(1039),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Discover Jake Vintage Ink Mavi Jet Black Jean Pants from Mavi's Men' Collection",
                            Price = 269.99000000000001,
                            ProductColorId = 7L,
                            ProductHeightId = 32L,
                            ProductId = 1L,
                            ProductThemeId = 1L,
                            StockCount = 0,
                            Title = "Jake Vintage Ink Mavi Jet Black Jean Pants"
                        },
                        new
                        {
                            ProductPropertyId = 11L,
                            DateCreated = new DateTime(2020, 4, 11, 1, 7, 57, 220, DateTimeKind.Utc).AddTicks(6840),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Discover Jake Vintage Ink Mavi Jet Black Jean Pants from Mavi's Men' Collection",
                            Price = 269.99000000000001,
                            ProductColorId = 7L,
                            ProductHeightId = 34L,
                            ProductId = 1L,
                            ProductThemeId = 1L,
                            StockCount = 0,
                            Title = "Jake Vintage Ink Mavi Jet Black Jean Pants"
                        },
                        new
                        {
                            ProductPropertyId = 12L,
                            DateCreated = new DateTime(2020, 4, 11, 1, 7, 57, 220, DateTimeKind.Utc).AddTicks(7046),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Discover Jake Vintage Ink Mavi Jet Black Jean Pants from Mavi's Men' Collection",
                            Price = 169.99000000000001,
                            ProductColorId = 5L,
                            ProductHeightId = 32L,
                            ProductId = 1L,
                            ProductThemeId = 1L,
                            StockCount = 0,
                            Title = "Jake Vintage Ink Mavi Jet Black Jean Pants"
                        },
                        new
                        {
                            ProductPropertyId = 13L,
                            DateCreated = new DateTime(2020, 4, 11, 1, 7, 57, 220, DateTimeKind.Utc).AddTicks(7051),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Discover Jake Vintage Ink Mavi Jet Black Jean Pants from Mavi's Men' Collection",
                            Price = 169.99000000000001,
                            ProductColorId = 5L,
                            ProductHeightId = 34L,
                            ProductId = 1L,
                            ProductThemeId = 1L,
                            StockCount = 0,
                            Title = "Jake Vintage Ink Mavi Jet Black Jean Pants"
                        },
                        new
                        {
                            ProductPropertyId = 2L,
                            DateCreated = new DateTime(2020, 4, 11, 1, 7, 57, 220, DateTimeKind.Utc).AddTicks(7054),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = @"Discover Jake Black Berlin Jean Pants from Mavi's Men' Collection
New Items
Regular Rise
Skinny
Slim Leg
98% Cotton 2% Elastan
Black",
                            Price = 269.99000000000001,
                            ProductColorId = 3L,
                            ProductHeightId = 32L,
                            ProductId = 1L,
                            ProductSizeId = 2L,
                            ProductThemeId = 1L,
                            StockCount = 0,
                            Title = "Jake Black Berlin Jean Pants"
                        },
                        new
                        {
                            ProductPropertyId = 3L,
                            DateCreated = new DateTime(2020, 4, 11, 1, 7, 57, 220, DateTimeKind.Utc).AddTicks(7951),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = @"Discover Jake Black Berlin Jean Pants from Mavi's Men' Collection
New Items
Regular Rise
Skinny
Slim Leg
98% Cotton 2% Elastan
Black",
                            Price = 269.99000000000001,
                            ProductColorId = 4L,
                            ProductHeightId = 32L,
                            ProductId = 1L,
                            ProductSizeId = 2L,
                            ProductThemeId = 1L,
                            StockCount = 0,
                            Title = "Jake Black Berlin Jean Pants"
                        },
                        new
                        {
                            ProductPropertyId = 4L,
                            DateCreated = new DateTime(2020, 4, 11, 1, 7, 57, 220, DateTimeKind.Utc).AddTicks(7984),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = @"Discover Jake Black Berlin Jean Pants from Mavi's Men' Collection
New Items
Regular Rise
Skinny
Slim Leg
98% Cotton 2% Elastan
Black",
                            Price = 269.99000000000001,
                            ProductColorId = 2L,
                            ProductHeightId = 32L,
                            ProductId = 2L,
                            ProductSizeId = 1L,
                            ProductThemeId = 2L,
                            ProductTrotterId = 1L,
                            StockCount = 0,
                            Title = "Jake Black Berlin Jean Pants"
                        },
                        new
                        {
                            ProductPropertyId = 5L,
                            DateCreated = new DateTime(2020, 4, 11, 1, 7, 57, 220, DateTimeKind.Utc).AddTicks(8818),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = @"Discover Jake Black Berlin Jean Pants from Mavi's Men' Collection
New Items
Regular Rise
Skinny
Slim Leg
98% Cotton 2% Elastan
Black",
                            Price = 269.99000000000001,
                            ProductColorId = 2L,
                            ProductHeightId = 32L,
                            ProductId = 2L,
                            ProductSizeId = 1L,
                            ProductThemeId = 2L,
                            ProductTrotterId = 2L,
                            StockCount = 0,
                            Title = "Jake Black Berlin Jean Pants"
                        },
                        new
                        {
                            ProductPropertyId = 6L,
                            DateCreated = new DateTime(2020, 4, 11, 1, 7, 57, 220, DateTimeKind.Utc).AddTicks(8845),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = @"Discover Jake Black Berlin Jean Pants from Mavi's Men' Collection
New Items
Regular Rise
Skinny
Slim Leg
98% Cotton 2% Elastan
Black",
                            Price = 269.99000000000001,
                            ProductColorId = 1L,
                            ProductHeightId = 32L,
                            ProductId = 1L,
                            ProductSizeId = 2L,
                            ProductThemeId = 2L,
                            StockCount = 0,
                            Title = "Jake Black Berlin Jean Pants"
                        });
                });

            modelBuilder.Entity("server.Models.ProductProperty.ProductColor", b =>
                {
                    b.Property<long>("ProductColorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Tag")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProductColorId");

                    b.ToTable("product_colors");

                    b.HasData(
                        new
                        {
                            ProductColorId = 1L,
                            DateAdded = new DateTime(2020, 4, 11, 1, 7, 57, 214, DateTimeKind.Utc).AddTicks(3007),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 1,
                            Tag = "Blue",
                            Url = "site.com/blue"
                        },
                        new
                        {
                            ProductColorId = 2L,
                            DateAdded = new DateTime(2020, 4, 11, 1, 7, 57, 214, DateTimeKind.Utc).AddTicks(6486),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 1,
                            Tag = "Red",
                            Url = "site.com/red"
                        },
                        new
                        {
                            ProductColorId = 3L,
                            DateAdded = new DateTime(2020, 4, 11, 1, 7, 57, 214, DateTimeKind.Utc).AddTicks(6632),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 1,
                            Tag = "Green",
                            Url = "site.com/green"
                        },
                        new
                        {
                            ProductColorId = 4L,
                            DateAdded = new DateTime(2020, 4, 11, 1, 7, 57, 214, DateTimeKind.Utc).AddTicks(6667),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 1,
                            Tag = "Black",
                            Url = "site.com/black"
                        },
                        new
                        {
                            ProductColorId = 5L,
                            DateAdded = new DateTime(2020, 4, 11, 1, 7, 57, 214, DateTimeKind.Utc).AddTicks(6700),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 1,
                            Tag = "White",
                            Url = "site.com/white"
                        },
                        new
                        {
                            ProductColorId = 6L,
                            DateAdded = new DateTime(2020, 4, 11, 1, 7, 57, 214, DateTimeKind.Utc).AddTicks(6727),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 1,
                            Tag = "Purple",
                            Url = "site.com/purple"
                        },
                        new
                        {
                            ProductColorId = 7L,
                            DateAdded = new DateTime(2020, 4, 11, 1, 7, 57, 214, DateTimeKind.Utc).AddTicks(6759),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 1,
                            Tag = "Navy",
                            Url = "site.com/navy"
                        });
                });

            modelBuilder.Entity("server.Models.ProductProperty.ProductHeight", b =>
                {
                    b.Property<long>("ProductHeightId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProductHeightId");

                    b.ToTable("product_height");

                    b.HasData(
                        new
                        {
                            ProductHeightId = 28L,
                            DateAdded = new DateTime(2020, 4, 11, 1, 7, 57, 215, DateTimeKind.Utc).AddTicks(1748),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 0,
                            Title = "28"
                        },
                        new
                        {
                            ProductHeightId = 30L,
                            DateAdded = new DateTime(2020, 4, 11, 1, 7, 57, 215, DateTimeKind.Utc).AddTicks(3799),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 0,
                            Title = "30"
                        },
                        new
                        {
                            ProductHeightId = 32L,
                            DateAdded = new DateTime(2020, 4, 11, 1, 7, 57, 215, DateTimeKind.Utc).AddTicks(3889),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 0,
                            Title = "32"
                        },
                        new
                        {
                            ProductHeightId = 34L,
                            DateAdded = new DateTime(2020, 4, 11, 1, 7, 57, 215, DateTimeKind.Utc).AddTicks(3920),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 0,
                            Title = "34"
                        },
                        new
                        {
                            ProductHeightId = 36L,
                            DateAdded = new DateTime(2020, 4, 11, 1, 7, 57, 215, DateTimeKind.Utc).AddTicks(3949),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 0,
                            Title = "36"
                        });
                });

            modelBuilder.Entity("server.Models.ProductProperty.ProductSize", b =>
                {
                    b.Property<long>("ProductSizeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProductSizeId");

                    b.ToTable("product_size");

                    b.HasData(
                        new
                        {
                            ProductSizeId = 1L,
                            DateAdded = new DateTime(2020, 4, 11, 1, 7, 57, 215, DateTimeKind.Utc).AddTicks(7679),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 0,
                            Title = "XXS"
                        },
                        new
                        {
                            ProductSizeId = 2L,
                            DateAdded = new DateTime(2020, 4, 11, 1, 7, 57, 215, DateTimeKind.Utc).AddTicks(9249),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 0,
                            Title = "XS"
                        },
                        new
                        {
                            ProductSizeId = 3L,
                            DateAdded = new DateTime(2020, 4, 11, 1, 7, 57, 215, DateTimeKind.Utc).AddTicks(9337),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 0,
                            Title = "S"
                        },
                        new
                        {
                            ProductSizeId = 4L,
                            DateAdded = new DateTime(2020, 4, 11, 1, 7, 57, 215, DateTimeKind.Utc).AddTicks(9374),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 0,
                            Title = "M"
                        },
                        new
                        {
                            ProductSizeId = 5L,
                            DateAdded = new DateTime(2020, 4, 11, 1, 7, 57, 215, DateTimeKind.Utc).AddTicks(9405),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 0,
                            Title = "L"
                        },
                        new
                        {
                            ProductSizeId = 6L,
                            DateAdded = new DateTime(2020, 4, 11, 1, 7, 57, 215, DateTimeKind.Utc).AddTicks(9438),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 0,
                            Title = "XL"
                        },
                        new
                        {
                            ProductSizeId = 7L,
                            DateAdded = new DateTime(2020, 4, 11, 1, 7, 57, 215, DateTimeKind.Utc).AddTicks(9496),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 0,
                            Title = "XXL"
                        },
                        new
                        {
                            ProductSizeId = 8L,
                            DateAdded = new DateTime(2020, 4, 11, 1, 7, 57, 215, DateTimeKind.Utc).AddTicks(9524),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 0,
                            Title = "XXXL"
                        },
                        new
                        {
                            ProductSizeId = 9L,
                            DateAdded = new DateTime(2020, 4, 11, 1, 7, 57, 215, DateTimeKind.Utc).AddTicks(9552),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 0,
                            Title = "24"
                        },
                        new
                        {
                            ProductSizeId = 10L,
                            DateAdded = new DateTime(2020, 4, 11, 1, 7, 57, 215, DateTimeKind.Utc).AddTicks(9579),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 0,
                            Title = "26"
                        },
                        new
                        {
                            ProductSizeId = 11L,
                            DateAdded = new DateTime(2020, 4, 11, 1, 7, 57, 215, DateTimeKind.Utc).AddTicks(9608),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 0,
                            Title = "28"
                        },
                        new
                        {
                            ProductSizeId = 12L,
                            DateAdded = new DateTime(2020, 4, 11, 1, 7, 57, 215, DateTimeKind.Utc).AddTicks(9636),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 0,
                            Title = "30"
                        },
                        new
                        {
                            ProductSizeId = 13L,
                            DateAdded = new DateTime(2020, 4, 11, 1, 7, 57, 215, DateTimeKind.Utc).AddTicks(9668),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 0,
                            Title = "32"
                        },
                        new
                        {
                            ProductSizeId = 14L,
                            DateAdded = new DateTime(2020, 4, 11, 1, 7, 57, 215, DateTimeKind.Utc).AddTicks(9697),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 0,
                            Title = "34"
                        },
                        new
                        {
                            ProductSizeId = 15L,
                            DateAdded = new DateTime(2020, 4, 11, 1, 7, 57, 215, DateTimeKind.Utc).AddTicks(9727),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 0,
                            Title = "36"
                        });
                });

            modelBuilder.Entity("server.Models.ProductProperty.ProductTheme", b =>
                {
                    b.Property<long>("ProductThemeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProductThemeId");

                    b.ToTable("product_theme");

                    b.HasData(
                        new
                        {
                            ProductThemeId = 1L,
                            DateCreated = new DateTime(2020, 4, 11, 1, 7, 57, 216, DateTimeKind.Utc).AddTicks(3499),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Slug = "new-items",
                            Status = 0,
                            Title = "New Items"
                        },
                        new
                        {
                            ProductThemeId = 2L,
                            DateCreated = new DateTime(2020, 4, 11, 1, 7, 57, 216, DateTimeKind.Utc).AddTicks(5866),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Slug = "season-sale",
                            Status = 0,
                            Title = "Season Sale"
                        },
                        new
                        {
                            ProductThemeId = 3L,
                            DateCreated = new DateTime(2020, 4, 11, 1, 7, 57, 216, DateTimeKind.Utc).AddTicks(5920),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Slug = "mavi-logo",
                            Status = 0,
                            Title = "Mavi Logo"
                        },
                        new
                        {
                            ProductThemeId = 4L,
                            DateCreated = new DateTime(2020, 4, 11, 1, 7, 57, 216, DateTimeKind.Utc).AddTicks(5923),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Slug = "smart",
                            Status = 0,
                            Title = "Smart"
                        },
                        new
                        {
                            ProductThemeId = 5L,
                            DateCreated = new DateTime(2020, 4, 11, 1, 7, 57, 216, DateTimeKind.Utc).AddTicks(5925),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Slug = "mavi-black",
                            Status = 0,
                            Title = "Mavi Black"
                        });
                });

            modelBuilder.Entity("server.Models.ProductProperty.ProductTrotter", b =>
                {
                    b.Property<long>("ProductTrotterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProductTrotterId");

                    b.ToTable("product_trotter");

                    b.HasData(
                        new
                        {
                            ProductTrotterId = 1L,
                            DateCreated = new DateTime(2020, 4, 11, 1, 7, 57, 216, DateTimeKind.Utc).AddTicks(9252),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Slug = "long-sleeve",
                            Status = 0,
                            Title = "Long Sleeve"
                        },
                        new
                        {
                            ProductTrotterId = 2L,
                            DateCreated = new DateTime(2020, 4, 11, 1, 7, 57, 217, DateTimeKind.Utc).AddTicks(1509),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Slug = "short-sleeve",
                            Status = 0,
                            Title = "Short Sleeve"
                        },
                        new
                        {
                            ProductTrotterId = 3L,
                            DateCreated = new DateTime(2020, 4, 11, 1, 7, 57, 217, DateTimeKind.Utc).AddTicks(1568),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Slug = "slim-leg",
                            Status = 0,
                            Title = "Slim Leg"
                        });
                });

            modelBuilder.Entity("server.Models.User.User", b =>
                {
                    b.Property<long>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Token")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("users");

                    b.HasData(
                        new
                        {
                            UserId = 1L,
                            DateCreated = new DateTime(2020, 4, 11, 1, 7, 56, 733, DateTimeKind.Utc).AddTicks(2050),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "info@ogun.me",
                            Firstname = "Ogün",
                            Lastname = "Baysal",
                            Password = "$2a$11$tr/fJBKLvncmwHvTbSl30.kh7GkU5yzzkfKu9KbxwYdvJx67wlYEy",
                            Role = "Admin",
                            Username = "Admin"
                        },
                        new
                        {
                            UserId = 2L,
                            DateCreated = new DateTime(2020, 4, 11, 1, 7, 56, 980, DateTimeKind.Utc).AddTicks(8139),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "ozgur.durak@yandex.com",
                            Firstname = "Özgür",
                            Lastname = "Durak",
                            Password = "$2a$11$SzSRLdcoEd268w8eidVo4OVnSxT.3ml9t/3k2kqTJjhWub3c7qYiK",
                            Role = "User",
                            Username = "ozgurdurak"
                        });
                });

            modelBuilder.Entity("server.Models.Address.District", b =>
                {
                    b.HasOne("server.Models.Address.Province", "Province")
                        .WithMany("Districts")
                        .HasForeignKey("ProvinceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("server.Models.Category.ChildCategory", b =>
                {
                    b.HasOne("server.Models.Category.SubCategory", "SubCategory")
                        .WithMany("ChildCategories")
                        .HasForeignKey("SubCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("server.Models.Category.SubCategory", b =>
                {
                    b.HasOne("server.Models.Category.Category", "ParentCategory")
                        .WithMany("SubCategories")
                        .HasForeignKey("ParentCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("server.Models.Order.Basket", b =>
                {
                    b.HasOne("server.Models.Product.ProductProperty", "ProductProperty")
                        .WithMany()
                        .HasForeignKey("ProductPropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("server.Models.User.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("server.Models.Order.Order", b =>
                {
                    b.HasOne("server.Models.Address.District", "District")
                        .WithMany()
                        .HasForeignKey("DistrictId");

                    b.HasOne("server.Models.User.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("server.Models.Order.OrderDetail", b =>
                {
                    b.HasOne("server.Models.Order.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("server.Models.Product.ProductProperty", "ProductProperty")
                        .WithMany()
                        .HasForeignKey("ProductPropertyId");
                });

            modelBuilder.Entity("server.Models.Product.Product", b =>
                {
                    b.HasOne("server.Models.Category.ChildCategory", "ChildCategory")
                        .WithMany()
                        .HasForeignKey("ChildCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("server.Models.Product.ProductImage", b =>
                {
                    b.HasOne("server.Models.Product.ProductProperty", "ProductProperty")
                        .WithMany("ProductImages")
                        .HasForeignKey("ProductPropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("server.Models.Product.ProductProperty", b =>
                {
                    b.HasOne("server.Models.ProductProperty.ProductColor", "ProductColor")
                        .WithMany()
                        .HasForeignKey("ProductColorId");

                    b.HasOne("server.Models.ProductProperty.ProductHeight", "ProductHeight")
                        .WithMany()
                        .HasForeignKey("ProductHeightId");

                    b.HasOne("server.Models.Product.Product", "Product")
                        .WithMany("ProductProperties")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("server.Models.ProductProperty.ProductSize", "ProductSize")
                        .WithMany()
                        .HasForeignKey("ProductSizeId");

                    b.HasOne("server.Models.ProductProperty.ProductTheme", "ProductTheme")
                        .WithMany()
                        .HasForeignKey("ProductThemeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("server.Models.ProductProperty.ProductTrotter", "ProductTrotter")
                        .WithMany()
                        .HasForeignKey("ProductTrotterId");
                });
#pragma warning restore 612, 618
        }
    }
}
